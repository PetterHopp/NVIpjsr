% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_PJS_code_description.R,
%   R/copy_PJS_code_2_text.R, R/read_PJS_code_2_text.R
\name{add_PJS_code_description}
\alias{add_PJS_code_description}
\alias{copy_PJS_codes_2_text}
\alias{read_PJS_codes_2_text}
\title{Manage translation of PJS codes to descriptive text}
\usage{
add_PJS_code_description(
  data,
  translation_table = PJS_codes_2_text,
  PJS_variable_type,
  code_colname,
  new_column,
  position = "right",
  overwrite = FALSE,
  backward = FALSE,
  impute_old_when_missing = FALSE
)

copy_PJS_codes_2_text(
  filename = "PJS_codes_2_text.csv",
  from_path = file.path(NVIdb::set_dir_NVI("Provedata_Rapportering", slash = FALSE),
    "FormaterteData"),
  to_path = NULL
)

read_PJS_codes_2_text(
  filename = "PJS_codes_2_text.csv",
  from_path = file.path(NVIdb::set_dir_NVI("Provedata_Rapportering", slash = FALSE),
    "FormaterteData"),
  ...
)
}
\arguments{
\item{data}{[\code{data.frame}] \cr
PJS data with at least one column that have codes for a PJS variable.}

\item{translation_table}{[\code{data.frame}] \cr
Table with the code and the description for PJS variables. Defaults to
"PJS_codes_2_text".}

\item{PJS_variable_type}{[\code{character}] \cr
One or more PJS variables, for example "hensikt". See details for a list
of all PJS variables included in the pre made translation table
"pjscode_2_descriptions.csv". If more than one code type should be translated,
they can be given in the vector. You may also use argument
\code{PJS_variable_type = "auto"}, if \code{code_colname} have standardized
PJS column names only, see details.}

\item{code_colname}{[\code{character}] \cr
The name of the column with codes that should be translated. If several codes
should be translated, a vector with the names of the coded variables should be given.}

\item{new_column}{[\code{character}] \cr
The name of the new column with the text describing the code. If several
codes should be translated, a vector with the new column names should be
given. You may also use argument \code{new_column = "auto"}, if \code{code_colname}
have standardized PJS column names only, see details.}

\item{position}{[\code{character}] \cr
Position for the new columns, can be one of c("first", "left", "right",
"last", "keep"). If several codes should be translated, either one value
to be applied for all may be given or a vector with specified position
for each code to be translated should be given. Defaults to "right".}

\item{overwrite}{[\code{logical(1)}]\cr
When the new column(s) already exist, 
    the content in the existing column(s) is replaced by new data if 
    \code{overwrite = TRUE}. If the new column(s) already exist and 
    \code{overwrite = FALSE}, an error is issued. Defaults to \code{FALSE}.}

\item{backward}{[\code{logical(1)}] \cr
If \code{TRUE}, it translates from descriptive text and back to PJS code,
see details. Defaults to \code{FALSE}.}

\item{impute_old_when_missing}{[\code{logical(1)}] \cr
Should existing value be transferred if no value for the code is found?
Defaults to \code{FALSE}.}

\item{filename}{[\code{character(1)}] \cr
File name of the source file for the translation table for PJS codes.}

\item{from_path}{[\code{character(1)}] \cr
Path for the source files used to generate the translation table. Defaults
to \code{file.path(NVIdb::set_dir_NVI("Provedata_Rapportering", slash = FALSE), "FormaterteData")}.}

\item{to_path}{[\code{character(1)}] \cr
Path to which the source files for generating the translation table should
be copied.}

\item{\dots}{Other arguments to be passed to
\ifelse{html}{\code{\link[utils:read.csv2]{utils::read.csv2}}}{\code{utils::read.csv2}}.}
}
\value{
\code{add_PJS_code_description} A data frame where the description text
    for the PJS code has been added in the column to the right of the column
    with the code. If the input is a tibble, it will be transformed to a data frame.

    \code{read_PJS_codes_2_text} A data frame with the translation table for PJS
    codes as read from the source csv-file. If not changing standard input, the
    standard file at NVI's internal network is read.

    \code{copy_PJS_codes_2_text} Copies the source translation table for PJS codes
    to another location. If the target file already exists the source file is only
    copied if it is newer than the target file.
}
\description{
Functions to adds a column with descriptive text for a column
   with PJS codes in a data frame with PJS data. You may also use backwards
   translation from descriptive text to PJS code. In addition there are
   functions to read and copy an updated version of the PJS code registers.
}
\details{
Export of data from PJS will produce data frames in which many columns
    have coded data. These need to be translated into descriptive text to
    increase readability.

    \code{add_PJS_code_description} can be used to translate the codes into
    descriptive text. In a data frame with coded values, the function can
    return a data frame with the descriptive text in a new column. As default,
    the descriptive text is input in a new column to the right of the column
    with codes.

    \code{add_PJS_code_description} uses the pre made translation table
    "PJS_codes_2_text.csv". The data need to be loaded by
    \code{read_PJS_codes_2_text} before running \code{add_PJS_code_description},
    see example. The file "PJS_codes_2_text.csv" is normally updated every night
    from PJS.

    Currently, the translation table has PJS codes and the corresponding
    description for the PJS variable types given in the first column in the table
    below. The standardized PJS column name is given in the column "code colname" for
    which the "PJS variable type" will translate into descriptive text. The standard
    new column name is given in the column "new column".

\tabular{llll}{
  \strong{PJS variable type} \tab \strong{code colname} \tab \strong{new column} \tab \strong{remark} \cr
  seksjon \tab ansvarlig_seksjon \tab ansvarlig_seksjon_navn \tab \cr
  seksjon \tab utf_seksjon \tab utforende_seksjon_navn \tab \cr
  hensikt \tab hensiktkode \tab hensikt \tab \cr
  utbrudd \tab utbruddnr \tab utbrudd \tab translates NVI's outbreak number \cr
  registertype \tab rekvirenttype \tab rekvirenttype_navn \tab categories of locations and addresses \cr
  registertype \tab eier_lokalitettype \tab eier_lokalitettype_navn \tab categories of locations and addresses \cr
  registertype \tab annen_aktortype \tab annen_aktortype_navn \tab categories of locations and addresses \cr
  rolle \tab annen_aktor_rollekode \tab annen_aktorrolle \tab categories of locations and addresses \cr
  art \tab artkode \tab art \tab species and breed codes to species name \cr
  artrase \tab artkode \tab art \tab species and breed codes to species or breed name \cr
  fysiologisk_stadium \tab fysiologisk_stadiumkode \tab fysiologisk_stadium \tab \cr
  kjonn \tab kjonn \tab kjonn_navn \tab \cr
  driftsform \tab driftsformkode \tab driftsform \tab \cr
  oppstalling \tab oppstallingkode \tab oppstalling \tab \cr
  provetype \tab provetypekode \tab provetype \tab \cr
  provetype \tab delpr_provetypekode \tab delprovetype \tab \cr
  provemateriale \tab provematerialekode \tab provemateriale \tab \cr
  provemateriale \tab delpr_provematerialekode \tab delprovemateriale \tab \cr
  forbehandling \tab forbehandlingkode \tab forbehandling \tab \cr
  forbehandling \tab delpr_forbehandlingkode \tab delpr_forbehandling \tab \cr
  metode \tab metodekode \tab metode \tab \cr
  metode \tab subund_metodekode \tab submetode \tab \cr
  konkl_type \tab konkl_typekode \tab konkl_type \tab \cr
  kjennelse \tab sakskonkl_kjennelsekode \tab sakskonkl_kjennelse \tab \cr
  kjennelse \tab konkl_kjennelsekode \tab konkl_kjennelse \tab \cr
  kjennelse \tab res_kjennelsekode \tab res_kjennelse \tab \cr
  kjennelse \tab subres_kjennelsekode \tab subres_kjennelse \tab \cr
  analytt \tab sakskonkl_analyttkode \tab sakskonkl_analytt \tab \cr
  analytt \tab konkl_analyttkode \tab konkl_analytt \tab \cr
  analytt \tab res_analyttkode \tab res_analytt \tab \cr
  analytt \tab subres_analyttkode \tab subres_analytt \tab \cr
  enhet \tab enhetkode \tab enhet \tab \cr
  enhet \tab subres_enhetkode \tab subres_enhet \tab \cr
}

    If \code{code_colname} is a vector of standardized PJS column names
    and a subset of "code column" in the table above, you may facilitate
    coding by setting \code{PJS_variable_type = "auto"} and/or
    \code{new_colname = "auto"}. Then the \code{PJS_variable_type} will be
    automatically set according to the table above (for "artkode"
    \code{PJS_variable_type = "art"} will be chosen). Likewise, the
    \code{new_column} will be automatically set according to the table above.

    \code{position} is used to give the position if the new columns in the
    data frame. For \code{position = "right"} the new variables are placed
    to the right of the code_variable. Likewise, for \code{position = "left"}
    the new variables are placed to the left of the code_variable. If
    \code{position = "first"} or \code{position = "last"} the new columns are
    placed first or last, respectively, in the data frame. A special case
    occurs for \code{position = "keep"} which only has meaning when the new
    column has the same name as an existing column and overwrite = TRUE. In
    these cases, the existing column will be overwritten with new data and
    have the same position.

    \code{backward = TRUE} can be used to translate from descriptive text and
    back to PJS codes. This intended for cases where the PJS code has been lost
    (for example in EOS data) or when data from other sources should be translated
    to codes to be able to use the code hierarchy for further processing of the
    data. Back translation ignores case. Be aware that the back translation is
    most useful for short descriptive text strings, as longer strings may have been
    shortened and the risk of misspelling and encoding problems is larger. For some
    descriptive text strings, there are no unique translation. In these cases,
    the code value is left empty.

    \code{read_PJS_codes_2_text} reads the file "PJS_codes_2_text.csv" into a
    data frame that can be used by \code{add_PJS_code_description}. In standard
    setting will the file read in the latest updated file from NVI's internal
    network. If changing the \code{from_path}, the function can be used to read
    the translation file from other directories. This can be useful if having a
    stand alone app with no connection the NVI's internal network. In other cases,
    it should be avoided.

    "PJS_codes_2_text.csv" has the following columns: c("type", "kode", "navn",
    "utgatt_dato"), where "type" is the PJS variable type as listed above (for
    example hensikt), "kode" is the variable with the PJS code, "navn" is the text
    describing the code, and "utgatt_dato" is the date for last date that the
    code was valid (\code{NA} if still valid). If translation tables are needed for
    other PJS variables, a data frame with the same column definition can be
    constructed to translate new variables.

    \code{copy_PJS_codes_2_text} copies the file "pjsCodeDescriptions.csv" to
    a given directory.
}
\examples{
\dontrun{
# Reading from standard directory at NVI's network
PJS_codes_2_text <- read_PJS_codes_2_text()

# Copy standard file from standard location to the subdirectory Data below the working directory
copy_PJS_codes_2_text(to_path = "./Data/")

# Reading from the subdirectory Data below the working directory
PJS_codes_2_text <- read_PJS_codes_2_text("PJS_codes_2_text.csv", "./Data/")

# Translating artkode into art
newdata <- add_PJS_code_description(olddata, PJS_codes_2_text, "art", "artkode", "art")

# Translating hensiktkode into Hensikt and konklusjonkode to Konklusjonskjennelse
newdata2 <- add_PJS_code_description(olddata,
                                    PJS_codes_2_text,
                                    PJS_variable_type = c("hensikt", "kjennelse"),
                                    code_colname = c("hensiktkode", "konklusjonkode"),
                                    new_column = c("hensikt", "konklusjonskjennelse"))

# Translating hensiktkode into hensikt and konklusjonkode to konklusjonskjennelse using "auto"
newdata3 <- add_PJS_code_description(olddata,
                                    PJS_codes_2_text,
                                    PJS_variable_type = c("auto"),
                                    code_colname = c("artkode", "hensiktkode", "konklusjonkode"),
                                    new_column = c("auto"))

# Translating art with species and breed names to only species names
# First the text in art is back-translated to the artkode
newdata4 <- add_PJS_code_description(data = olddata,
                                     PJS_variable_type = "artrase",
                                     code_colname = "art",
                                     new_column = "artkode",
                                     backward = TRUE,
                                     impute_old_when_missing = TRUE)

# Thereafter, the code is translated to art
# By using `impute_old_when_missing = TRUE`, you ensure that text that cannot
# be translated back to code, is reported as text in the end result.
newdata4 <- add_PJS_code_description(data = newdata4,
                                     PJS_variable_type = "art",
                                     code_colname = "artkode",
                                     new_column = "art",
                                     position = "keep",
                                     overwrite = TRUE,
                                     impute_old_when_missing = TRUE)
}

}
\author{
Petter Hopp Petter.Hopp@vetinst.no
}
